<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="PromptTemplates">
    <option name="builtInPromptOverrides">
      <list>
        <BuiltInPromptOverride>
          <option name="groupId" value="rules" />
          <option name="promptId" value="project" />
          <option name="text" value="General&#10;Kotlin is the preferred language. The project uses the K2 compiler.&#10;&#10;Include &quot;Copyright 2025 MyCompany&quot; at the top of all new files.&#10;&#10;Architecture&#10;The project follows a multi-module, feature-based, layered architecture.&#10;&#10;Module Structure:&#10;&#10;:app: The application shell.&#10;&#10;:core-ui: Shared Compose UI components and theme.&#10;&#10;:core-data: Repositories and data source interfaces.&#10;&#10;:core-database: Room database implementation (DAOs, Entities).&#10;&#10;:core-testing: Shared testing utilities and dependencies.&#10;&#10;:feature-*: Self-contained feature modules (e.g., :feature-chat).&#10;&#10;Dependency Flow: Dependencies must flow one way: Features -&gt; Core. Core modules must never depend on feature modules.&#10;&#10;Build &amp; Dependencies&#10;Dependency Management: Use the Gradle Version Catalog (libs.versions.toml) as the single source of truth.&#10;&#10;Java Version: The project targets Java 17.&#10;&#10;Annotation Processing: Use KSP instead of Kapt for both Hilt and Room.&#10;&#10;Key Libraries:&#10;&#10;UI: Jetpack Compose and Material3.&#10;&#10;Asynchronous: Kotlin Coroutines and Flows.&#10;&#10;Dependency Injection: Hilt.&#10;&#10;Database: Room.&#10;&#10;Other: Jetpack ViewModels, Accompanist libraries.&#10;&#10;Code Quality &amp; Style&#10;Formatting: Use Spotless with the ktlint engine to enforce code style.&#10;&#10;Static Analysis (Kotlin): Use Detekt with a central detekt.yml configuration. The configuration is tuned for Compose (e.g., allows PascalCase for @Composable functions).&#10;&#10;Static Analysis (Android): Use the built-in Android Lint tool, configured to check release builds and treat issues seriously.&#10;&#10;Imports: Do not use wildcard imports (*).&#10;&#10;Naming &amp; Package Conventions&#10;Module Namespaces: Library module namespaces must be nested under the main application's package name (e.g., com.mycompany.appname.feature.chat).&#10;&#10;Package Structure:&#10;&#10;Package names should be all lowercase and not contain underscores.&#10;&#10;Code within feature modules should be organized into sub-packages (e.g., ui, data).&#10;&#10;Test package structures (test and androidTest) must mirror the main source set.&#10;&#10;Composable Functions: Function names for @Composable functions must use PascalCase." />
        </BuiltInPromptOverride>
      </list>
    </option>
  </component>
</project>